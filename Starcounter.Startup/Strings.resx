<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultPageCreator_CouldNotCreatePage" xml:space="preserve">
    <value>Could not create page of type '{0}'</value>
  </data>
  <data name="DefaultPageCreator_CouldNotInstantiateParameter" xml:space="preserve">
    <value>Could not instantiate parameter '{0}'</value>
  </data>
  <data name="DefaultPageCreator_TypeImplementsInitWithDependenciesBadly" xml:space="preserve">
    <value>Type implements {0}, but doesn't declare a public, non-static method 'Init'</value>
  </data>
  <data name="ReflectionHelper_InvalidApplicationOfAttribute" xml:space="preserve">
    <value>Invalid application of attribute {0} in type {1}: {2}</value>
  </data>
  <data name="ReflectionHelper_MethodNotPublic" xml:space="preserve">
    <value>Method marked with {0} should be public. Method {1} is not</value>
  </data>
  <data name="ReflectionHelper_MethodNotStatic" xml:space="preserve">
    <value>Method marked with {0} should be static. Method {1} is not</value>
  </data>
  <data name="ReflectionHelper_MethodShouldAcceptOneParameter" xml:space="preserve">
    <value>Method marked with {0} should accept first parameter of type {1}. Method {2} does not conform</value>
  </data>
  <data name="ReflectionHelper_MultipleMethods" xml:space="preserve">
    <value>Please mark only one public static method with {0}. Marked methods: {1}</value>
  </data>
  <data name="ReflectionHelper_WrongReturnType" xml:space="preserve">
    <value>Method marked with {0} should return {1} or its subclass. Method {2} does not conform</value>
  </data>
  <data name="ContextMiddleware_CouldNotCreateContext" xml:space="preserve">
    <value>Could not create context of type {0} for view-model of type {1}: {2}</value>
  </data>
  <data name="ContextMiddleware_ContextIsDbSoUriShouldHaveOneArgument" xml:space="preserve">
    <value>There should be exactly one URI argument that is ID of {0} object in DB. If you want to create context manually use {1}</value>
  </data>
  <data name="ContextMiddleware_MarkViewModelAsIBoundOrUriToContext" xml:space="preserve">
    <value>Please mark {0} as IBound to a database type or use {1}</value>
  </data>
  <data name="ContextMiddleware_CouldNotResolveUriToContextDependencies" xml:space="preserve">
    <value>Could not resolve dependency of method {0}</value>
  </data>
  <data name="MasterPageMiddleware_MasterPageIsNull" xml:space="preserve">
    <value>created master page is null</value>
  </data>
  <data name="Router_TypeHasNoUrlAttribute" xml:space="preserve">
    <value>Type {0} has no {1} applied</value>
  </data>
  <data name="Router_MoreParametersNotSupported" xml:space="preserve">
    <value>Not supported: more than 4 parameters in URL</value>
  </data>
  <data name="Router_RegisteringUri" xml:space="preserve">
    <value>Registering URI '{0}' with type '{1}'</value>
  </data>
  <data name="UriHelper_CantFillUriTemplateSlotCountMismatch" xml:space="preserve">
    <value>Can't fill URI template '{0}' with arguments: provided URI template has {1} slots, but {2} argument(s) were provided. Arguments values: {3}</value>
  </data>
  <data name="UriHelper_MalformedUri" xml:space="preserve">
    <value>URI '{0}' is malformed: URI should start with a '/'</value>
  </data>
</root>